<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.1 (20210923.0004)
 -->
<!-- Pages: 1 -->
<svg width="306pt" height="749pt"
 viewBox="0.00 0.00 305.50 749.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 745)">
<g id="a_graph0"><a xlink:title="DeltaDebugger class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-745 301.5,-745 301.5,4 -4,4"/>
</a>
</g>
<!-- DeltaDebugger -->
<g id="node1" class="node">
<title>DeltaDebugger</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class DeltaDebugger:&#10;Like CallReducer, but cache test outcomes.">
<polygon fill="none" stroke="black" points="6,-0.5 6,-119.5 161,-119.5 161,-0.5 6,-0.5"/>
<text text-anchor="start" x="35" y="-105.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DeltaDebugger</text>
<polyline fill="none" stroke="black" points="6,-96.5 161,-96.5 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="DeltaDebugger">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__repr__(self) &#45;&gt; str:&#10;Return a string representation of the minimized call.">
<text text-anchor="start" x="14.5" y="-85.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__repr__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="dd(self, var_to_be_reduced: str, fail_args: Dict[str, Any], *, mode: str = &#39;&#45;&#39;) &#45;&gt; Tuple[Sequence, Sequence, Sequence]:&#10;General Delta Debugging.&#10;`var_to_be_reduced` &#45; the name of the variable to reduce.&#10;`fail_args` &#45; a dict of (failure&#45;inducing) function arguments,&#10;with `fail_args[var_to_be_reduced]` &#45; the input to apply dd on.&#10;`mode`&#45; how the algorithm should operate:&#10;&#39;&#45;&#39; (default): minimize input (`ddmin`),&#10;&#39;+&#39;: maximizing input (`ddmax`),&#10;&#39;+&#45;&#39;: minimizing pass/fail difference (`dd`)&#10;Returns a triple (`pass`, `fail`, `diff`) with&#10;* maximized passing input (`pass`),&#10;* minimized failing input (`fail`), and&#10;* their difference `diff`&#10;(elems that are in `fail`, but not in `pass`).">
<text text-anchor="start" x="14.5" y="-74.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">dd()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="max_args(self) &#45;&gt; Dict[str, Any]:&#10;Return 1&#45;maximal arguments.">
<text text-anchor="start" x="14.5" y="-63.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">max_args()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="min_arg_diff(self) &#45;&gt; Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:&#10;Return 1&#45;minimal difference between arguments.">
<text text-anchor="start" x="14.5" y="-52.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">min_arg_diff()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="min_args(self) &#45;&gt; Dict[str, Any]:&#10;Return 1&#45;minimal arguments.">
<text text-anchor="start" x="14.5" y="-41.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">min_args()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="after_collection(self) &#45;&gt; None:&#10;Called after collection. To be defined in subclasses.">
<text text-anchor="start" x="14.5" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">after_collection()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="check_reproducibility(self) &#45;&gt; None">
<text text-anchor="start" x="14.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">check_reproducibility()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="process_args(self, strategy: Callable, **strategy_args: Any) &#45;&gt; Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:&#10;Reduce all reducible arguments, using `strategy`(var, `strategy_args`).&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="14.5" y="-8.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_args()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CachingCallReducer -->
<g id="node2" class="node">
<title>CachingCallReducer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class CachingCallReducer:&#10;Like CallReducer, but cache test outcomes.">
<polygon fill="none" stroke="black" points="11,-156.5 11,-209.5 156,-209.5 156,-156.5 11,-156.5"/>
<text text-anchor="start" x="19" y="-195.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CachingCallReducer</text>
<polyline fill="none" stroke="black" points="11,-186.5 156,-186.5 "/>
<g id="a_node2_9"><a xlink:href="#" xlink:title="CachingCallReducer">
<g id="a_node2_10"><a xlink:href="#" xlink:title="init(self) &#45;&gt; None:&#10;Reset for new collection.">
<text text-anchor="start" x="65.5" y="-175.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">init()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="#" xlink:title="test(self, args: Dict[str, Any]) &#45;&gt; str:&#10;Like run(), but also log detail and keep statistics.">
<text text-anchor="start" x="65.5" y="-164.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">test()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;CachingCallReducer -->
<g id="edge1" class="edge">
<title>DeltaDebugger&#45;&gt;CachingCallReducer</title>
<path fill="none" stroke="black" d="M83.5,-119.73C83.5,-128.79 83.5,-137.9 83.5,-146.25"/>
<polygon fill="none" stroke="black" points="80,-146.37 83.5,-156.37 87,-146.37 80,-146.37"/>
</g>
<!-- CallReducer -->
<g id="node3" class="node">
<title>CallReducer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class CallReducer:&#10;Collect an exception&#45;raising function call f().&#10;Use as `with CallCollector(): f()`">
<polygon fill="none" stroke="black" points="36.5,-246.5 36.5,-332.5 130.5,-332.5 130.5,-246.5 36.5,-246.5"/>
<text text-anchor="start" x="44.5" y="-318.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CallReducer</text>
<polyline fill="none" stroke="black" points="36.5,-309.5 130.5,-309.5 "/>
<g id="a_node3_12"><a xlink:href="#" xlink:title="CallReducer">
<g id="a_node3_13"><a xlink:href="#" xlink:title="__init__(self, *, log: Union[bool, int] = False) &#45;&gt; None:&#10;Initialize. If `log` is True, enable logging.">
<text text-anchor="start" x="47.5" y="-298" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="reduce_arg(self, var_to_be_reduced: str, args: Dict[str, Any]) &#45;&gt; Sequence:&#10;Determine and return a minimal value for var_to_be_reduced.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="47.5" y="-287" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">reduce_arg()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="reset(self) &#45;&gt; None:&#10;Reset the number of tests.">
<text text-anchor="start" x="47.5" y="-275" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="run(self, args: Dict[str, Any]) &#45;&gt; str:&#10;Run collected function with `args`. Return&#10;* PASS if no exception occurred&#10;* FAIL if the collected exception occurred&#10;* UNRESOLVED if some other exception occurred.&#10;Not to be used directly; can be overloaded in subclasses.">
<text text-anchor="start" x="47.5" y="-265" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="test(self, args: Dict[str, Any]) &#45;&gt; str:&#10;Like run(), but also log detail and keep statistics.">
<text text-anchor="start" x="47.5" y="-254" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">test()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CachingCallReducer&#45;&gt;CallReducer -->
<g id="edge2" class="edge">
<title>CachingCallReducer&#45;&gt;CallReducer</title>
<path fill="none" stroke="black" d="M83.5,-209.56C83.5,-217.55 83.5,-226.68 83.5,-235.83"/>
<polygon fill="none" stroke="black" points="80,-236.1 83.5,-246.1 87,-236.1 80,-236.1"/>
</g>
<!-- CallCollector -->
<g id="node4" class="node">
<title>CallCollector</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class CallCollector:&#10;Collect an exception&#45;raising function call f().&#10;Use as `with CallCollector(): f()`">
<polygon fill="none" stroke="black" points="21,-369.5 21,-532.5 146,-532.5 146,-369.5 21,-369.5"/>
<text text-anchor="start" x="43" y="-518.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CallCollector</text>
<polyline fill="none" stroke="black" points="21,-509.5 146,-509.5 "/>
<g id="a_node4_18"><a xlink:href="#" xlink:title="CallCollector">
<g id="a_node4_19"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="29.5" y="-498.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__enter__()</text>
</a>
</g>
<g id="a_node4_20"><a xlink:href="#" xlink:title="__exit__(self, exc_tp: Type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; Optional[bool]:&#10;Called at end of `with` block. Turn tracing off.">
<text text-anchor="start" x="29.5" y="-487.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__exit__()</text>
</a>
</g>
<g id="a_node4_21"><a xlink:href="#" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize collector">
<text text-anchor="start" x="29.5" y="-476.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_22"><a xlink:href="#" xlink:title="args(self) &#45;&gt; Dict[str, Any]:&#10;Return the dictionary of collected arguments.">
<text text-anchor="start" x="29.5" y="-465.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">args()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="#" xlink:title="call(self, new_args: Optional[Dict[str, Any]] = None) &#45;&gt; Any:&#10;Call collected function. If `new_args` is given,&#10;override arguments from its {var: value} entries.">
<text text-anchor="start" x="29.5" y="-454.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">call()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="#" xlink:title="exception(self) &#45;&gt; Optional[BaseException]:&#10;Return the exception produced, or `None` if none.">
<text text-anchor="start" x="29.5" y="-443.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">exception()</text>
</a>
</g>
<g id="a_node4_25"><a xlink:href="#" xlink:title="function(self) &#45;&gt; Callable:&#10;Return the function called.">
<text text-anchor="start" x="29.5" y="-432.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">function()</text>
</a>
</g>
<g id="a_node4_26"><a xlink:href="#" xlink:title="after_collection(self) &#45;&gt; None:&#10;Called after collection. To be defined in subclasses.">
<text text-anchor="start" x="29.5" y="-421.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">after_collection()</text>
</a>
</g>
<g id="a_node4_27"><a xlink:href="#" xlink:title="format_call(self, args: Optional[Dict[str, Any]] = None) &#45;&gt; str:&#10;Return a string representing a call of the function with given args.">
<text text-anchor="start" x="29.5" y="-409.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_call()</text>
</a>
</g>
<g id="a_node4_28"><a xlink:href="#" xlink:title="format_exception(self, exc: Optional[BaseException] = None) &#45;&gt; str:&#10;Return a string representing the given exception.">
<text text-anchor="start" x="29.5" y="-398.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_exception()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="#" xlink:title="init(self) &#45;&gt; None:&#10;Reset for new collection.">
<text text-anchor="start" x="29.5" y="-388.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">init()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="#" xlink:title="traceit(self, frame: frame, event: str, arg: Any) &#45;&gt; None:&#10;Tracing function. Collect first call, then turn tracing off.">
<text text-anchor="start" x="29.5" y="-376.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CallReducer&#45;&gt;CallCollector -->
<g id="edge3" class="edge">
<title>CallReducer&#45;&gt;CallCollector</title>
<path fill="none" stroke="black" d="M83.5,-332.82C83.5,-341 83.5,-349.87 83.5,-358.92"/>
<polygon fill="none" stroke="black" points="80,-359.21 83.5,-369.21 87,-359.21 80,-359.21"/>
</g>
<!-- StackInspector -->
<g id="node5" class="node">
<title>StackInspector</title>
<g id="a_node5"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="black" points="0,-569.5 0,-740.5 167,-740.5 167,-569.5 0,-569.5"/>
<text text-anchor="start" x="37" y="-726.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="black" points="0,-717.5 167,-717.5 "/>
<g id="a_node5_31"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node5_32"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {}">
<text text-anchor="start" x="8.5" y="-705" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="0,-698.5 167,-698.5 "/>
<g id="a_node5_33"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node5_34"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="26.5" y="-687" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_frame()</text>
</a>
</g>
<g id="a_node5_35"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="26.5" y="-676" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_function()</text>
</a>
</g>
<g id="a_node5_36"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-665" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_globals()</text>
</a>
</g>
<g id="a_node5_37"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-654" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_locals()</text>
</a>
</g>
<g id="a_node5_38"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="26.5" y="-643" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_location()</text>
</a>
</g>
<g id="a_node5_39"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp: Type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="26.5" y="-632" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">is_internal_error()</text>
</a>
</g>
<g id="a_node5_40"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame: frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="26.5" y="-621" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">our_frame()</text>
</a>
</g>
<g id="a_node5_41"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name: str, frame: Optional[frame] = None) &#45;&gt; Tuple[Optional[frame], Optional[Callable]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="26.5" y="-610" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">search_frame()</text>
</a>
</g>
<g id="a_node5_42"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name: str, frame: Optional[frame] = None) &#45;&gt; Optional[Callable]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="26.5" y="-599" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">search_func()</text>
</a>
</g>
<g id="a_node5_43"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame: frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="26.5" y="-587" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">create_function()</text>
</a>
</g>
<g id="a_node5_44"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="26.5" y="-576" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CallCollector&#45;&gt;StackInspector -->
<g id="edge4" class="edge">
<title>CallCollector&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M83.5,-532.71C83.5,-541.49 83.5,-550.49 83.5,-559.41"/>
<polygon fill="none" stroke="black" points="80,-559.45 83.5,-569.45 87,-559.45 80,-559.45"/>
</g>
<!-- Legend -->
<g id="node6" class="node">
<title>Legend</title>
<text text-anchor="start" x="179.5" y="-77.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="179.5" y="-67.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="186.5" y="-67.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="179.5" y="-57.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="186.5" y="-57.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="179.5" y="-47.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="186.5" y="-47.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="179.5" y="-38.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
