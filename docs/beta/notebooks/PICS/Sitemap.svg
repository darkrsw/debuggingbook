<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.1 (20210923.0004)
 -->
<!-- Pages: 1 -->
<svg width="825pt" height="268pt"
 viewBox="0.00 0.00 824.50 268.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 264)">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-264 820.5,-264 820.5,4 -4,4"/>
<!-- Tracer -->
<g id="node1" class="node">
<title>Tracer</title>
<g id="a_node1"><a xlink:href="Tracer.ipynb" xlink:title="Tracing Executions (Tracer)&#10;&#10;In this chapter, we show how to observe program state during an execution – a prerequisite for logging and interactive debugging. Thanks to the power of Python, we can do this in a few lines of code.">
<polygon fill="white" stroke="black" points="450,-185 323,-185 323,-149 456,-149 456,-179 450,-185"/>
<polyline fill="none" stroke="black" points="450,-185 450,-179 "/>
<polyline fill="none" stroke="black" points="456,-179 450,-179 "/>
<text text-anchor="middle" x="389.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracing Executions</text>
</a>
</g>
</g>
<!-- Debugger -->
<g id="node2" class="node">
<title>Debugger</title>
<g id="a_node2"><a xlink:href="Debugger.ipynb" xlink:title="How Debuggers Work (Debugger)&#10;&#10;Interactive debuggers are tools that allow you to selectively observe the program state during an execution. &#160;In this chapter, you will learn how such debuggers work – by building your own debugger.">
<polygon fill="white" stroke="black" points="389.5,-111 239.5,-111 239.5,-75 395.5,-75 395.5,-105 389.5,-111"/>
<polyline fill="none" stroke="black" points="389.5,-111 389.5,-105 "/>
<polyline fill="none" stroke="black" points="395.5,-105 389.5,-105 "/>
<text text-anchor="middle" x="317.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">How Debuggers Work</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Debugger -->
<g id="edge1" class="edge">
<title>Tracer&#45;&gt;Debugger</title>
<path fill="none" stroke="black" d="M372.44,-148.94C363.42,-139.92 352.2,-128.7 342.24,-118.74"/>
<polygon fill="black" stroke="black" points="344.49,-116.04 334.94,-111.44 339.54,-120.99 344.49,-116.04"/>
</g>
<!-- Assertions -->
<g id="node3" class="node">
<title>Assertions</title>
<g id="a_node3"><a xlink:href="Assertions.ipynb" xlink:title="Asserting Expectations (Assertions)&#10;&#10;In the previous chapters on tracing and interactive debugging, we have seen how to observe executions. By checking our observations against our expectations, we can find out when and how the program state is faulty. So far, we have assumed that this check would be done by humans – that is, us. However, having this check done by a computer, for instance as part of the execution, is infinitely more rigorous and efficient. In this chapter, we introduce techniques to specify our expectations and to check them at runtime, enabling us to detect faults right as they occur.">
<polygon fill="white" stroke="black" points="505,-112 414,-112 414,-74 511,-74 511,-106 505,-112"/>
<polyline fill="none" stroke="black" points="505,-112 505,-106 "/>
<polyline fill="none" stroke="black" points="511,-106 505,-106 "/>
<text text-anchor="middle" x="462.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Asserting</text>
<text text-anchor="middle" x="462.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Expectations</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;Assertions -->
<g id="edge2" class="edge">
<title>Tracer&#45;&gt;Assertions</title>
<path fill="none" stroke="black" d="M406.8,-148.94C415.74,-140.12 426.82,-129.19 436.74,-119.4"/>
<polygon fill="black" stroke="black" points="439.39,-121.71 444.05,-112.2 434.47,-116.73 439.39,-121.71"/>
</g>
<!-- DeltaDebugger -->
<g id="node4" class="node">
<title>DeltaDebugger</title>
<g id="a_node4"><a xlink:href="DeltaDebugger.ipynb" xlink:title="Reducing Failure&#45;Inducing Inputs (DeltaDebugger)&#10;&#10;A standard problem in debugging is this: Your program fails after processing some large input. Only a part of this input, however, is responsible for the failure. Reducing the input to a failure&#45;inducing minimum not only eases debugging – it also helps in understanding why and when the program fails. In this chapter, we present techniques that automatically reduce and simplify failure&#45;inducing inputs to a minimum, notably the popular Delta Debugging technique.">
<polygon fill="white" stroke="black" points="650,-112 529,-112 529,-74 656,-74 656,-106 650,-112"/>
<polyline fill="none" stroke="black" points="650,-112 650,-106 "/>
<polyline fill="none" stroke="black" points="656,-106 650,-106 "/>
<text text-anchor="middle" x="592.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Reducing Failure&#45;</text>
<text text-anchor="middle" x="592.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Inputs</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DeltaDebugger -->
<g id="edge3" class="edge">
<title>Tracer&#45;&gt;DeltaDebugger</title>
<path fill="none" stroke="black" d="M437.61,-148.94C465.86,-138.92 501.82,-126.16 531.98,-115.47"/>
<polygon fill="black" stroke="black" points="533.29,-118.71 541.55,-112.07 530.95,-112.12 533.29,-118.71"/>
</g>
<!-- StatisticalDebugger -->
<g id="node5" class="node">
<title>StatisticalDebugger</title>
<g id="a_node5"><a xlink:href="StatisticalDebugger.ipynb" xlink:title="Statistical Debugging (StatisticalDebugger)&#10;&#10;In this chapter, we introduce statistical debugging – the idea that specific events during execution could be statistically correlated with failures. We start with coverage of individual lines and then proceed towards further execution features.">
<polygon fill="white" stroke="black" points="81,-112 0,-112 0,-74 87,-74 87,-106 81,-112"/>
<polyline fill="none" stroke="black" points="81,-112 81,-106 "/>
<polyline fill="none" stroke="black" points="87,-106 81,-106 "/>
<text text-anchor="middle" x="43.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Statistical</text>
<text text-anchor="middle" x="43.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;StatisticalDebugger -->
<g id="edge4" class="edge">
<title>Tracer&#45;&gt;StatisticalDebugger</title>
<path fill="none" stroke="black" d="M322.86,-156.54C265.35,-147.74 180.01,-133.15 96.88,-111.9"/>
<polygon fill="black" stroke="black" points="97.58,-108.46 87.02,-109.34 95.82,-115.24 97.58,-108.46"/>
</g>
<!-- DynamicInvariants -->
<g id="node6" class="node">
<title>DynamicInvariants</title>
<g id="a_node6"><a xlink:href="DynamicInvariants.ipynb" xlink:title="Mining Function Specifications (DynamicInvariants)&#10;&#10;In the chapter on assertions, we have seen how important it is to check whether the result is as expected. &#160;In this chapter, we introduce a technique that allows us to mine function specifications from a set of given executions, resulting in abstract and formal descriptions of what the function expects and what it delivers.">
<polygon fill="white" stroke="black" points="215.5,-112 105.5,-112 105.5,-74 221.5,-74 221.5,-106 215.5,-112"/>
<polyline fill="none" stroke="black" points="215.5,-112 215.5,-106 "/>
<polyline fill="none" stroke="black" points="221.5,-106 215.5,-106 "/>
<text text-anchor="middle" x="163.5" y="-96.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Mining Function</text>
<text text-anchor="middle" x="163.5" y="-81.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Specifications</text>
</a>
</g>
</g>
<!-- Tracer&#45;&gt;DynamicInvariants -->
<g id="edge5" class="edge">
<title>Tracer&#45;&gt;DynamicInvariants</title>
<path fill="none" stroke="black" d="M335.94,-148.94C304.22,-138.83 263.76,-125.94 230.01,-115.19"/>
<polygon fill="black" stroke="black" points="230.82,-111.77 220.23,-112.07 228.69,-118.44 230.82,-111.77"/>
</g>
<!-- ChangeDebugger -->
<g id="node10" class="node">
<title>ChangeDebugger</title>
<g id="a_node10"><a xlink:href="ChangeDebugger.ipynb" xlink:title="Isolating Failure&#45;Inducing Changes (ChangeDebugger)&#10;&#10;&quot;Yesterday, my program worked. Today, it does not. Why?&quot; In debugging, as elsewhere in software development, code keeps on changing. Thus, it can happen that a piece of code that yesterday was working perfectly, today no longer runs – because we (or others) have made some changes to it that cause it to fail. The good news is that for debugging, we can actually exploit this version history to narrow down the changes that caused the failure – be it by us or by others.">
<polygon fill="white" stroke="black" points="574.5,-38 450.5,-38 450.5,0 580.5,0 580.5,-32 574.5,-38"/>
<polyline fill="none" stroke="black" points="574.5,-38 574.5,-32 "/>
<polyline fill="none" stroke="black" points="580.5,-32 574.5,-32 "/>
<text text-anchor="middle" x="515.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Isolating Failure&#45;</text>
<text text-anchor="middle" x="515.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Inducing Changes</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;ChangeDebugger -->
<g id="edge9" class="edge">
<title>DeltaDebugger&#45;&gt;ChangeDebugger</title>
<path fill="none" stroke="black" d="M573.07,-73.83C563.77,-65.13 552.48,-54.58 542.37,-45.13"/>
<polygon fill="black" stroke="black" points="544.62,-42.44 534.92,-38.16 539.84,-47.55 544.62,-42.44"/>
</g>
<!-- DDSetDebugger -->
<g id="node11" class="node">
<title>DDSetDebugger</title>
<g id="a_node11"><a xlink:href="DDSetDebugger.ipynb" xlink:title="Generalizing Failure Circumstances (DDSetDebugger)&#10;&#10;One central question in debugging is: Does this bug occur in other situations, too? In this chapter, we present a technique that is set to generalize the circumstances under which a failure occurs. The DDSET algorithm takes a failure&#45;inducing input, breaks it into individual elements. For each element, it tries to find whether it can be replaced by others in the same category, and if so, it generalizes the concrete element to the very category. The result is a pattern that characterizes the failure condition: &quot;The failure occurs for all inputs of the form (&lt;expr&gt; * &lt;expr&gt;).">
<polygon fill="white" stroke="black" points="732,-38 599,-38 599,0 738,0 738,-32 732,-38"/>
<polyline fill="none" stroke="black" points="732,-38 732,-32 "/>
<polyline fill="none" stroke="black" points="738,-32 732,-32 "/>
<text text-anchor="middle" x="668.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Generalizing Failure</text>
<text text-anchor="middle" x="668.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Circumstances</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;DDSetDebugger -->
<g id="edge10" class="edge">
<title>DeltaDebugger&#45;&gt;DDSetDebugger</title>
<path fill="none" stroke="black" d="M611.68,-73.83C620.86,-65.13 632,-54.58 641.98,-45.13"/>
<polygon fill="black" stroke="black" points="644.48,-47.58 649.33,-38.16 639.66,-42.5 644.48,-47.58"/>
</g>
<!-- PerformanceDebugger -->
<g id="node12" class="node">
<title>PerformanceDebugger</title>
<g id="a_node12"><a xlink:href="PerformanceDebugger.ipynb" xlink:title="Debugging Performance Issues (PerformanceDebugger)&#10;&#10;Most chapters of this book deal with functional issues – that is, issues related to the functionality (or its absence) of the code in question. However, debugging can also involve nonfunctional issues, however – performance, usability, reliability, and more. In this chapter, we give a short introduction on how to debug such nonfunctional issues, notably performance issues.">
<polygon fill="white" stroke="black" points="211.5,-38 77.5,-38 77.5,0 217.5,0 217.5,-32 211.5,-38"/>
<polyline fill="none" stroke="black" points="211.5,-38 211.5,-32 "/>
<polyline fill="none" stroke="black" points="217.5,-32 211.5,-32 "/>
<text text-anchor="middle" x="147.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
<text text-anchor="middle" x="147.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Performance Issues</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge11" class="edge">
<title>DeltaDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="black" d="M528.98,-75.75C526.12,-75.13 523.28,-74.55 520.5,-74 492.45,-68.48 328.89,-45.33 227.9,-31.2"/>
<polygon fill="black" stroke="black" points="228.11,-27.69 217.72,-29.77 227.14,-34.63 228.11,-27.69"/>
</g>
<!-- Repairer -->
<g id="node13" class="node">
<title>Repairer</title>
<g id="a_node13"><a xlink:href="Repairer.ipynb" xlink:title="Repairing Code Automatically (Repairer)&#10;&#10;So far, we have discussed how to track failures and how to locate defects in code. Let us now discuss how to repair defects – that is, to correct the code such that the failure no longer occurs. We will discuss how to repair code automatically – by systematically searching through possible fixes and evolving the most promising candidates.">
<polygon fill="white" stroke="black" points="398,-38 291,-38 291,0 404,0 404,-32 398,-38"/>
<polyline fill="none" stroke="black" points="398,-38 398,-32 "/>
<polyline fill="none" stroke="black" points="404,-32 398,-32 "/>
<text text-anchor="middle" x="347.5" y="-22.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Repairing Code</text>
<text text-anchor="middle" x="347.5" y="-7.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Automatically</text>
</a>
</g>
</g>
<!-- DeltaDebugger&#45;&gt;Repairer -->
<g id="edge12" class="edge">
<title>DeltaDebugger&#45;&gt;Repairer</title>
<path fill="none" stroke="black" d="M530.99,-73.92C495.49,-63.49 450.82,-50.36 414.44,-39.67"/>
<polygon fill="black" stroke="black" points="414.99,-36.19 404.41,-36.72 413.02,-42.9 414.99,-36.19"/>
</g>
<!-- StatisticalDebugger&#45;&gt;PerformanceDebugger -->
<g id="edge13" class="edge">
<title>StatisticalDebugger&#45;&gt;PerformanceDebugger</title>
<path fill="none" stroke="black" d="M69.74,-73.83C82.8,-64.79 98.75,-53.75 112.8,-44.02"/>
<polygon fill="black" stroke="black" points="115.04,-46.73 121.26,-38.16 111.05,-40.98 115.04,-46.73"/>
</g>
<!-- StatisticalDebugger&#45;&gt;Repairer -->
<g id="edge14" class="edge">
<title>StatisticalDebugger&#45;&gt;Repairer</title>
<path fill="none" stroke="black" d="M87.05,-76.76C90.23,-75.79 93.41,-74.85 96.5,-74 158.43,-56.88 230.19,-41.92 281.08,-32.12"/>
<polygon fill="black" stroke="black" points="281.81,-35.54 290.97,-30.22 280.49,-28.67 281.81,-35.54"/>
</g>
<!-- Intro_Debugging -->
<g id="node7" class="node">
<title>Intro_Debugging</title>
<g id="a_node7"><a xlink:href="Intro_Debugging.ipynb" xlink:title="Introduction to Debugging (Intro_Debugging)&#10;&#10;In this book, we want to explore debugging &#45; the art and science of fixing bugs in computer software. In particular, we want to explore techniques that automatically answer questions like: Where is the bug? When does it occur? And how can we repair it? But before we start automating the debugging process, we first need to understand what this process is.">
<polygon fill="white" stroke="black" points="622,-260 521,-260 521,-222 628,-222 628,-254 622,-260"/>
<polyline fill="none" stroke="black" points="622,-260 622,-254 "/>
<polyline fill="none" stroke="black" points="628,-254 622,-254 "/>
<text text-anchor="middle" x="574.5" y="-244.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Introduction to</text>
<text text-anchor="middle" x="574.5" y="-229.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Debugging</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracer -->
<g id="edge6" class="edge">
<title>Intro_Debugging&#45;&gt;Tracer</title>
<path fill="none" stroke="black" d="M527.82,-221.83C501.98,-211.78 469.77,-199.24 442.93,-188.79"/>
<polygon fill="black" stroke="black" points="443.89,-185.41 433.31,-185.05 441.36,-191.94 443.89,-185.41"/>
</g>
<!-- Slicer -->
<g id="node8" class="node">
<title>Slicer</title>
<g id="a_node8"><a xlink:href="Slicer.ipynb" xlink:title="Tracking Failure Origins (Slicer)&#10;&#10;The question of &quot;Where does this value come from?&quot; is fundamental for debugging. Which earlier variables could possibly have influenced the current erroneous state? And how did their values come to be?">
<polygon fill="white" stroke="black" points="620.5,-186 522.5,-186 522.5,-148 626.5,-148 626.5,-180 620.5,-186"/>
<polyline fill="none" stroke="black" points="620.5,-186 620.5,-180 "/>
<polyline fill="none" stroke="black" points="626.5,-180 620.5,-180 "/>
<text text-anchor="middle" x="574.5" y="-170.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking </text>
<text text-anchor="middle" x="574.5" y="-155.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Failure Origins</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Slicer -->
<g id="edge7" class="edge">
<title>Intro_Debugging&#45;&gt;Slicer</title>
<path fill="none" stroke="black" d="M574.5,-221.83C574.5,-214.13 574.5,-204.97 574.5,-196.42"/>
<polygon fill="black" stroke="black" points="578,-196.41 574.5,-186.41 571,-196.41 578,-196.41"/>
</g>
<!-- Tracking -->
<g id="node9" class="node">
<title>Tracking</title>
<g id="a_node9"><a xlink:href="Tracking.ipynb" xlink:title="Tracking Bugs (Tracking)&#10;&#10;So far, we have assumed that failures would be discovered and fixed by a single programmer during development. But what if the user who discovers a bug is different from the developer who eventually fixes it? In this case, users have to report bugs, and one needs to ensure that reported bugs are systematically tracked. This is the job of dedicated bug tracking systems, which we will discuss (and demo) in this chapter.">
<polygon fill="white" stroke="black" points="768,-185 669,-185 669,-149 774,-149 774,-179 768,-185"/>
<polyline fill="none" stroke="black" points="768,-185 768,-179 "/>
<polyline fill="none" stroke="black" points="774,-179 768,-179 "/>
<text text-anchor="middle" x="721.5" y="-163.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Tracking Bugs</text>
</a>
</g>
</g>
<!-- Intro_Debugging&#45;&gt;Tracking -->
<g id="edge8" class="edge">
<title>Intro_Debugging&#45;&gt;Tracking</title>
<path fill="none" stroke="black" d="M611.59,-221.83C631.67,-212 656.6,-199.79 677.64,-189.48"/>
<polygon fill="black" stroke="black" points="679.25,-192.59 686.69,-185.05 676.17,-186.3 679.25,-192.59"/>
</g>
<!-- ChangeCounter -->
<g id="node14" class="node">
<title>ChangeCounter</title>
<g id="a_node14"><a xlink:href="ChangeCounter.ipynb" xlink:title="Where the Bugs are (ChangeCounter)&#10;&#10;Every time a bug is fixed, developers leave a trace – in the version database when they commit the fix, or in the bug database when they close the bug. In this chapter, we learn how to mine these repositories for past changes and bugs, and how to map them to individual modules and functions, highlighting those project components that have seen most changes and fixes over time.">
<polygon fill="white" stroke="black" points="810.5,-111 674.5,-111 674.5,-75 816.5,-75 816.5,-105 810.5,-111"/>
<polyline fill="none" stroke="black" points="810.5,-111 810.5,-105 "/>
<polyline fill="none" stroke="black" points="816.5,-105 810.5,-105 "/>
<text text-anchor="middle" x="745.5" y="-89.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="14.00" fill="#6a0dad">Where the Bugs are</text>
</a>
</g>
</g>
<!-- Tracking&#45;&gt;ChangeCounter -->
<g id="edge15" class="edge">
<title>Tracking&#45;&gt;ChangeCounter</title>
<path fill="none" stroke="black" d="M727.19,-148.94C729.96,-140.63 733.35,-130.44 736.46,-121.11"/>
<polygon fill="black" stroke="black" points="739.84,-122.03 739.69,-111.44 733.2,-119.82 739.84,-122.03"/>
</g>
</g>
</svg>
