<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 7.0.2 (20221119.0110)
 -->
<!-- Pages: 1 -->
<svg width="547pt" height="794pt"
 viewBox="0.00 0.00 546.50 794.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 790)">
<g id="a_graph0"><a xlink:title="Slicer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-790 542.5,-790 542.5,4 -4,4"/>
</a>
</g>
<!-- Slicer -->
<g id="node1" class="node">
<title>Slicer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Slicer:&#10;Track dependencies in an execution">
<polygon fill="none" stroke="black" points="0,-26.5 0,-222.5 191,-222.5 191,-26.5 0,-26.5"/>
<text text-anchor="start" x="78" y="-208.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Slicer</text>
<polyline fill="none" stroke="black" points="0,-199.5 191,-199.5"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Slicer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, *items_to_instrument: Any, dependency_tracker: Optional[DependencyTracker] = None, globals: Optional[Dict[str, Any]] = None, log: Union[bool, int] = False):&#10;Create a slicer.&#10;`items_to_instrument` are Python functions or modules with source code.&#10;`dependency_tracker` is the tracker to be used (default: DependencyTracker).&#10;`globals` is the namespace to be used(default: caller&#39;s `globals()`)&#10;`log`=True or `log` &gt; 0 turns on logging">
<text text-anchor="start" x="8.5" y="-188" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="_repr_mimebundle_(self, include: Any = None, exclude: Any = None) &#45;&gt; Any:&#10;If the object is output in Jupyter, render dependencies as a SVG graph">
<text text-anchor="start" x="8.5" y="-177" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">_repr_mimebundle_()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="code(self, *args: Any, **kwargs: Any) &#45;&gt; None:&#10;Show code of instrumented items, annotated with dependencies.">
<text text-anchor="start" x="8.5" y="-166" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">code()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="dependencies(self) &#45;&gt; Dependencies:&#10;Return collected dependencies.">
<text text-anchor="start" x="8.5" y="-155" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">dependencies()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="graph(self, *args: Any, **kwargs: Any) &#45;&gt; graphviz.graphs.Digraph:&#10;Show dependency graph.">
<text text-anchor="start" x="8.5" y="-144" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">graph()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="calls_in_our_with_block(self) &#45;&gt; Set[str]:&#10;Return a set of function names called in the `with` block.">
<text text-anchor="start" x="8.5" y="-132" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">calls_in_our_with_block()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="default_items_to_instrument(self) &#45;&gt; List[Callable]">
<text text-anchor="start" x="8.5" y="-122" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">default_items_to_instrument()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="execute(self, tree: ast.AST, item: Any) &#45;&gt; None:&#10;Compile and execute `tree`. May be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-111" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">execute()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="funcs_in_our_with_block(self) &#45;&gt; List[Callable]">
<text text-anchor="start" x="8.5" y="-99" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">funcs_in_our_with_block()</text>
</a>
</g>
<g id="a_node1_10"><a xlink:href="#" xlink:title="instrument(self, item: Any) &#45;&gt; Any:&#10;Instrument `item`, transforming its source code, and re&#45;defining it.">
<text text-anchor="start" x="8.5" y="-89" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">instrument()</text>
</a>
</g>
<g id="a_node1_11"><a xlink:href="#" xlink:title="our_with_block(self) &#45;&gt; ast.With:&#10;Return the currently active `with` block.">
<text text-anchor="start" x="8.5" y="-77" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">our_with_block()</text>
</a>
</g>
<g id="a_node1_12"><a xlink:href="#" xlink:title="parse(self, item: Any) &#45;&gt; ast.AST:&#10;Parse `item`, returning its AST">
<text text-anchor="start" x="8.5" y="-66" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">parse()</text>
</a>
</g>
<g id="a_node1_13"><a xlink:href="#" xlink:title="restore(self) &#45;&gt; None:&#10;Restore original code.">
<text text-anchor="start" x="8.5" y="-56" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restore()</text>
</a>
</g>
<g id="a_node1_14"><a xlink:href="#" xlink:title="transform(self, tree: ast.AST) &#45;&gt; ast.AST:&#10;Apply transformers on `tree`. May be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-45" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">transform()</text>
</a>
</g>
<g id="a_node1_15"><a xlink:href="#" xlink:title="transformers(self) &#45;&gt; List[ast.NodeTransformer]:&#10;List of transformers to apply. To be extended in subclasses.">
<text text-anchor="start" x="8.5" y="-34" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">transformers()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Instrumenter -->
<g id="node2" class="node">
<title>Instrumenter</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class Instrumenter:&#10;Instrument functions for dynamic tracking">
<polygon fill="none" stroke="black" points="18,-405 18,-502 209,-502 209,-405 18,-405"/>
<text text-anchor="start" x="75.5" y="-487.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">Instrumenter</text>
<polyline fill="none" stroke="black" points="18,-479 209,-479"/>
<g id="a_node2_16"><a xlink:href="#" xlink:title="Instrumenter">
<g id="a_node2_17"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Instrument sources">
<text text-anchor="start" x="26.5" y="-468" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__enter__()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Restore sources">
<text text-anchor="start" x="26.5" y="-457" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__exit__()</text>
</a>
</g>
<g id="a_node2_19"><a xlink:href="#" xlink:title="__init__(self, *items_to_instrument: Callable, globals: Optional[Dict[str, Any]] = None, log: Union[bool, int] = False) &#45;&gt; None:&#10;Create an instrumenter.&#10;`items_to_instrument` is a list of items to instrument.&#10;`globals` is a namespace to use (default: caller&#39;s globals())">
<text text-anchor="start" x="26.5" y="-446" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="#" xlink:title="instrument(self, item: Any) &#45;&gt; Any:&#10;Instrument `item`. To be overloaded in subclasses.">
<text text-anchor="start" x="26.5" y="-435" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">instrument()</text>
</a>
</g>
<g id="a_node2_21"><a xlink:href="#" xlink:title="default_items_to_instrument(self) &#45;&gt; List[Callable]">
<text text-anchor="start" x="26.5" y="-424" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">default_items_to_instrument()</text>
</a>
</g>
<g id="a_node2_22"><a xlink:href="#" xlink:title="restore(self) &#45;&gt; None">
<text text-anchor="start" x="26.5" y="-413" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restore()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Slicer&#45;&gt;Instrumenter -->
<g id="edge1" class="edge">
<title>Slicer&#45;&gt;Instrumenter</title>
<path fill="none" stroke="black" d="M100.83,-222.28C103.89,-277.96 107.64,-346.09 110.27,-393.73"/>
<polygon fill="none" stroke="black" points="106.76,-393.78 110.81,-403.57 113.75,-393.39 106.76,-393.78"/>
</g>
<!-- StackInspector -->
<g id="node3" class="node">
<title>StackInspector</title>
<g id="a_node3"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="black" points="212,-658.5 212,-785.5 379,-785.5 379,-658.5 212,-658.5"/>
<text text-anchor="start" x="250" y="-771.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="black" points="212,-762.5 379,-762.5"/>
<g id="a_node3_23"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_24"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {(&#39;&lt;cell line: 2&gt;&#39;, 2): &lt;function &lt;cell line: 2&gt;&gt;, (&#39;&lt;cell line: 1&gt;&#39;, 1): &lt;function &lt;cell line: 1&gt;&gt;, (&#39;&lt;cell line: 3&gt;&#39;, 3): &lt;function &lt;cell line: 3&gt;&gt;, (&#39;&lt;cell line: 4&gt;&#39;, 4): &lt;function &lt;cell line: 4&gt;&gt;, (&#39;&lt;cell line: 1&gt;&#39;, 4): &lt;function &lt;cell line: 1&gt;&gt;, (&#39;&lt;cell line: 1&gt;&#39;, 3): &lt;function &lt;cell line: 1&gt;&gt;, (&#39;&lt;listcomp&gt;&#39;, 18): &lt;bound method StackInspector.unknown of &lt;__main__.DependencyTracker object&gt;&gt;}">
<text text-anchor="start" x="220.5" y="-750" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="212,-743.5 379,-743.5"/>
<g id="a_node3_25"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_26"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="244.5" y="-732" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_frame()</text>
</a>
</g>
<g id="a_node3_27"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="244.5" y="-721" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_function()</text>
</a>
</g>
<g id="a_node3_28"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="244.5" y="-710" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_globals()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="244.5" y="-699" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_locals()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="244.5" y="-688" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">caller_location()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name: str, frame: Optional[frame] = None) &#45;&gt; Tuple[Optional[frame], Optional[Callable]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="244.5" y="-677" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">search_frame()</text>
</a>
</g>
<g id="a_node3_32"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name: str, frame: Optional[frame] = None) &#45;&gt; Optional[Callable]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="244.5" y="-666" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">search_func()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Instrumenter&#45;&gt;StackInspector -->
<g id="edge2" class="edge">
<title>Instrumenter&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M145.21,-501.92C167.76,-535.53 198.83,-581.64 226.5,-622 232.52,-630.78 238.88,-639.98 245.19,-649.09"/>
<polygon fill="none" stroke="black" points="242.3,-651.06 250.88,-657.28 248.05,-647.07 242.3,-651.06"/>
</g>
<!-- DependencyTracker -->
<g id="node4" class="node">
<title>DependencyTracker</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class DependencyTracker:&#10;Track dependencies during execution">
<polygon fill="none" stroke="black" points="209,-0.5 209,-248.5 400,-248.5 400,-0.5 209,-0.5"/>
<text text-anchor="start" x="240.5" y="-234.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DependencyTracker</text>
<polyline fill="none" stroke="black" points="209,-225.5 400,-225.5"/>
<g id="a_node4_33"><a xlink:href="#" xlink:title="DependencyTracker">
<g id="a_node4_34"><a xlink:href="#" xlink:title="TEST = &#39;&lt;test&gt;&#39;">
<text text-anchor="start" x="292.5" y="-213" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">TEST</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="209,-206.5 400,-206.5"/>
<g id="a_node4_35"><a xlink:href="#" xlink:title="DependencyTracker">
<g id="a_node4_36"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Track entering an if/while/for block">
<text text-anchor="start" x="217.5" y="-195.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__enter__()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Track exiting an if/while/for block">
<text text-anchor="start" x="217.5" y="-184.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__exit__()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="#" xlink:title="__init__(self, *args: Any, **kwargs: Any) &#45;&gt; None:&#10;Constructor. Arguments are passed to DataTracker.__init__()">
<text text-anchor="start" x="217.5" y="-173.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_39"><a xlink:href="#" xlink:title="arg(self, value: Any, pos: Optional[int] = None, kw: Optional[str] = None) &#45;&gt; Any:&#10;Track passing an argument `value`&#10;(with given position `pos` 1..n or keyword `kw`)">
<text text-anchor="start" x="217.5" y="-162.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">arg()</text>
</a>
</g>
<g id="a_node4_40"><a xlink:href="#" xlink:title="call(self, func: Callable) &#45;&gt; Callable:&#10;Track a call of function `func`">
<text text-anchor="start" x="217.5" y="-151.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">call()</text>
</a>
</g>
<g id="a_node4_41"><a xlink:href="#" xlink:title="get(self, name: str, value: Any) &#45;&gt; Any:&#10;Track a read access for variable `name` with value `value`">
<text text-anchor="start" x="217.5" y="-140.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">get()</text>
</a>
</g>
<g id="a_node4_42"><a xlink:href="#" xlink:title="param(self, name: str, value: Any, pos: Optional[int] = None, vararg: str = &#39;&#39;, last: bool = False) &#45;&gt; Any:&#10;Track getting a parameter `name` with value `value`&#10;(with given position `pos`).&#10;vararg parameters are indicated by setting `varargs` to&#10;&#39;*&#39; (*args) or &#39;**&#39; (**kwargs)">
<text text-anchor="start" x="217.5" y="-129.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">param()</text>
</a>
</g>
<g id="a_node4_43"><a xlink:href="#" xlink:title="ret(self, value: Any) &#45;&gt; Any:&#10;Track a function return">
<text text-anchor="start" x="217.5" y="-118.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">ret()</text>
</a>
</g>
<g id="a_node4_44"><a xlink:href="#" xlink:title="set(self, name: str, value: Any, loads: Optional[Set[str]] = None) &#45;&gt; Any:&#10;Add a dependency for `name` = `value`">
<text text-anchor="start" x="217.5" y="-107.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">set()</text>
</a>
</g>
<g id="a_node4_45"><a xlink:href="#" xlink:title="test(self, value: Any) &#45;&gt; Any:&#10;Track a test for condition `value`">
<text text-anchor="start" x="217.5" y="-96.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">test()</text>
</a>
</g>
<g id="a_node4_46"><a xlink:href="#" xlink:title="call_generator(self, func: Callable) &#45;&gt; Callable:&#10;Track a call of a generator function">
<text text-anchor="start" x="217.5" y="-84.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">call_generator()</text>
</a>
</g>
<g id="a_node4_47"><a xlink:href="#" xlink:title="check_location(self) &#45;&gt; None:&#10;If we are in a new location, clear set of read variables">
<text text-anchor="start" x="217.5" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">check_location()</text>
</a>
</g>
<g id="a_node4_48"><a xlink:href="#" xlink:title="clear_read(self) &#45;&gt; None:&#10;Clear set of read variables">
<text text-anchor="start" x="217.5" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">clear_read()</text>
</a>
</g>
<g id="a_node4_49"><a xlink:href="#" xlink:title="dependencies(self) &#45;&gt; Dependencies:&#10;Return dependencies">
<text text-anchor="start" x="217.5" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">dependencies()</text>
</a>
</g>
<g id="a_node4_50"><a xlink:href="#" xlink:title="ignore_location_change(self) &#45;&gt; None">
<text text-anchor="start" x="217.5" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ignore_location_change()</text>
</a>
</g>
<g id="a_node4_51"><a xlink:href="#" xlink:title="ignore_next_location_change(self) &#45;&gt; None">
<text text-anchor="start" x="217.5" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ignore_next_location_change()</text>
</a>
</g>
<g id="a_node4_52"><a xlink:href="#" xlink:title="in_generator(self) &#45;&gt; bool:&#10;True if we are calling a generator function">
<text text-anchor="start" x="217.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">in_generator()</text>
</a>
</g>
<g id="a_node4_53"><a xlink:href="#" xlink:title="ret_generator(self, generator: Any) &#45;&gt; Any:&#10;Track the return of a generator function">
<text text-anchor="start" x="217.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ret_generator()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DataTracker -->
<g id="node5" class="node">
<title>DataTracker</title>
<g id="a_node5"><a xlink:href="#" xlink:title="class DataTracker:&#10;Track data accesses during execution">
<polygon fill="none" stroke="black" points="236,-372 236,-535 355,-535 355,-372 236,-372"/>
<text text-anchor="start" x="258.5" y="-520.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DataTracker</text>
<polyline fill="none" stroke="black" points="236,-512 355,-512"/>
<g id="a_node5_54"><a xlink:href="#" xlink:title="DataTracker">
<g id="a_node5_55"><a xlink:href="#" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Enter `with` block. To be overloaded in subclasses.">
<text text-anchor="start" x="244.5" y="-501" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__enter__()</text>
</a>
</g>
<g id="a_node5_56"><a xlink:href="#" xlink:title="__exit__(self, exc_type: Type, exc_value: BaseException, traceback: traceback) &#45;&gt; Optional[bool]:&#10;Exit `with` block. To be overloaded in subclasses.">
<text text-anchor="start" x="244.5" y="-490" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__exit__()</text>
</a>
</g>
<g id="a_node5_57"><a xlink:href="#" xlink:title="__init__(self, log: bool = False) &#45;&gt; None:&#10;Constructor. If `log` is set, turn on logging.">
<text text-anchor="start" x="244.5" y="-479" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node5_58"><a xlink:href="#" xlink:title="arg(self, value: Any, pos: Optional[int] = None, kw: Optional[str] = None) &#45;&gt; Any:&#10;Track `value` being passed as argument.&#10;`pos` (if given) is the argument position (starting with 1).&#10;`kw` (if given) is the argument keyword.">
<text text-anchor="start" x="244.5" y="-468" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">arg()</text>
</a>
</g>
<g id="a_node5_59"><a xlink:href="#" xlink:title="augment(self, name: str, value: Any) &#45;&gt; Any:&#10;Track augmenting `name` with `value`.&#10;To be overloaded in subclasses.">
<text text-anchor="start" x="244.5" y="-457" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">augment()</text>
</a>
</g>
<g id="a_node5_60"><a xlink:href="#" xlink:title="call(self, func: Callable) &#45;&gt; Callable:&#10;Track a call to `func`.">
<text text-anchor="start" x="244.5" y="-446" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">call()</text>
</a>
</g>
<g id="a_node5_61"><a xlink:href="#" xlink:title="get(self, name: str, value: Any) &#45;&gt; Any:&#10;Track getting `value` from `name`.">
<text text-anchor="start" x="244.5" y="-435" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">get()</text>
</a>
</g>
<g id="a_node5_62"><a xlink:href="#" xlink:title="param(self, name: str, value: Any, pos: Optional[int] = None, vararg: str = &#39;&#39;, last: bool = False) &#45;&gt; Any:&#10;At the beginning of a function, track parameter `name` being set to `value`.&#10;`pos` is the position of the argument (starting with 1).&#10;`vararg` is &quot;*&quot; if `name` is a vararg parameter (as in *args),&#10;and &quot;**&quot; is `name` is a kwargs parameter (as in *kwargs).&#10;`last` is True if `name` is the last parameter.">
<text text-anchor="start" x="244.5" y="-424" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">param()</text>
</a>
</g>
<g id="a_node5_63"><a xlink:href="#" xlink:title="ret(self, value: Any) &#45;&gt; Any:&#10;Track `value` being used as return value.">
<text text-anchor="start" x="244.5" y="-413" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">ret()</text>
</a>
</g>
<g id="a_node5_64"><a xlink:href="#" xlink:title="set(self, name: str, value: Any, loads: Optional[Set[str]] = None) &#45;&gt; Any:&#10;Track setting `name` to `value`.">
<text text-anchor="start" x="244.5" y="-402" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">set()</text>
</a>
</g>
<g id="a_node5_65"><a xlink:href="#" xlink:title="test(self, cond: ast.AST) &#45;&gt; ast.AST:&#10;Test condition `cond`. To be overloaded in subclasses.">
<text text-anchor="start" x="244.5" y="-391" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">test()</text>
</a>
</g>
<g id="a_node5_66"><a xlink:href="#" xlink:title="instrument_call(self, func: Callable) &#45;&gt; Callable:&#10;Instrument a call to `func`. To be implemented in subclasses.">
<text text-anchor="start" x="244.5" y="-380" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">instrument_call()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DependencyTracker&#45;&gt;DataTracker -->
<g id="edge3" class="edge">
<title>DependencyTracker&#45;&gt;DataTracker</title>
<path fill="none" stroke="black" d="M301.12,-248.19C300.09,-285.64 298.98,-326.14 298.01,-361.13"/>
<polygon fill="none" stroke="black" points="294.53,-360.68 297.75,-370.77 301.52,-360.87 294.53,-360.68"/>
</g>
<!-- DataTracker&#45;&gt;StackInspector -->
<g id="edge4" class="edge">
<title>DataTracker&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M295.5,-534.82C295.5,-570.64 295.5,-612.55 295.5,-647.53"/>
<polygon fill="none" stroke="black" points="292,-647.11 295.5,-657.11 299,-647.11 292,-647.11"/>
</g>
<!-- Dependencies -->
<g id="node6" class="node">
<title>Dependencies</title>
<g id="a_node6"><a xlink:href="#" xlink:title="class Dependencies:&#10;A dependency graph">
<polygon fill="none" stroke="black" points="373,-285.5 373,-621.5 504,-621.5 504,-285.5 373,-285.5"/>
<text text-anchor="start" x="391.5" y="-607.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Dependencies</text>
<polyline fill="none" stroke="black" points="373,-598.5 504,-598.5"/>
<g id="a_node6_67"><a xlink:href="#" xlink:title="Dependencies">
<g id="a_node6_68"><a xlink:href="#" xlink:title="FONT_NAME = &#39;Courier&#39;">
<text text-anchor="start" x="408.5" y="-586.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">FONT_NAME</text>
</a>
</g>
<g id="a_node6_69"><a xlink:href="#" xlink:title="NODE_COLOR = &#39;peachpuff&#39;">
<text text-anchor="start" x="408.5" y="-575.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">NODE_COLOR</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="373,-568.5 504,-568.5"/>
<g id="a_node6_70"><a xlink:href="#" xlink:title="Dependencies">
<g id="a_node6_71"><a xlink:href="#" xlink:title="__init__(self, data: Optional[Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]] = None, control: Optional[Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]] = None) &#45;&gt; None:&#10;Create a dependency graph from `data` and `control`.&#10;Both `data` and `control` are dictionaries&#10;holding _nodes_ as keys and sets of nodes as values.&#10;Each node comes as a tuple (variable_name, location)&#10;where `variable_name` is a string&#10;and `location` is a pair (function, lineno)&#10;where `function` is a callable and `lineno` is a line number&#10;denoting a unique location in the code.">
<text text-anchor="start" x="381.5" y="-557" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node6_72"><a xlink:href="#" xlink:title="__repr__(self) &#45;&gt; str:&#10;Represent dependencies as a Python expression">
<text text-anchor="start" x="381.5" y="-546" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__repr__()</text>
</a>
</g>
<g id="a_node6_73"><a xlink:href="#" xlink:title="__str__(self) &#45;&gt; str:&#10;Return string representation of dependencies">
<text text-anchor="start" x="381.5" y="-535" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__str__()</text>
</a>
</g>
<g id="a_node6_74"><a xlink:href="#" xlink:title="_repr_mimebundle_(self, include: Any = None, exclude: Any = None) &#45;&gt; Any:&#10;If the object is output in Jupyter, render dependencies as a SVG graph">
<text text-anchor="start" x="381.5" y="-524" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">_repr_mimebundle_()</text>
</a>
</g>
<g id="a_node6_75"><a xlink:href="#" xlink:title="all_functions(self) &#45;&gt; Dict[Callable, List[Tuple[int, Tuple[str, Tuple[Callable, int]]]]]:&#10;Return mapping&#10;{`function`: [(`lineno`, `var`), (`lineno`, `var`), ...], ...}&#10;for all functions in the dependencies.">
<text text-anchor="start" x="381.5" y="-513" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">all_functions()</text>
</a>
</g>
<g id="a_node6_76"><a xlink:href="#" xlink:title="all_vars(self) &#45;&gt; Set[Tuple[str, Tuple[Callable, int]]]:&#10;Return a set of all variables (as `var_name`, `location`) in the dependencies">
<text text-anchor="start" x="381.5" y="-502" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">all_vars()</text>
</a>
</g>
<g id="a_node6_77"><a xlink:href="#" xlink:title="backward_slice(self, *criteria: Union[str, Tuple[Callable, int], Tuple[str, Tuple[Callable, int]]], mode: str = &#39;cd&#39;, depth: int = &#45;1) &#45;&gt; Dependencies:&#10;Create a backward slice from nodes `criteria`.&#10;`mode` can contain &#39;c&#39; (draw control dependencies)&#10;and &#39;d&#39; (draw data dependencies) (default: &#39;cd&#39;)">
<text text-anchor="start" x="381.5" y="-491" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">backward_slice()</text>
</a>
</g>
<g id="a_node6_78"><a xlink:href="#" xlink:title="code(self, *items: Callable, mode: str = &#39;cd&#39;) &#45;&gt; None:&#10;List `items` on standard output, including dependencies as comments.&#10;If `items` is empty, all included functions are listed.&#10;`mode` can contain &#39;c&#39; (draw control dependencies) and &#39;d&#39; (draw data dependencies)&#10;(default: &#39;cd&#39;).">
<text text-anchor="start" x="381.5" y="-480" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">code()</text>
</a>
</g>
<g id="a_node6_79"><a xlink:href="#" xlink:title="graph(self, *, mode: str = &#39;flow&#39;) &#45;&gt; graphviz.graphs.Digraph:&#10;Draw dependencies. `mode` is either&#10;* `&#39;flow&#39;`: arrows indicate information flow (from A to B); or&#10;* `&#39;depend&#39;`: arrows indicate dependencies (B depends on A)">
<text text-anchor="start" x="381.5" y="-469" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">graph()</text>
</a>
</g>
<g id="a_node6_80"><a xlink:href="#" xlink:title="_code(self, item: Callable, mode: str) &#45;&gt; None">
<text text-anchor="start" x="381.5" y="-457" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_code()</text>
</a>
</g>
<g id="a_node6_81"><a xlink:href="#" xlink:title="_source(self, node: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str">
<text text-anchor="start" x="381.5" y="-446" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_source()</text>
</a>
</g>
<g id="a_node6_82"><a xlink:href="#" xlink:title="add_hierarchy(self, g: graphviz.graphs.Digraph) &#45;&gt; graphviz.graphs.Digraph:&#10;Add invisible edges for a proper hierarchy.">
<text text-anchor="start" x="381.5" y="-435" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_hierarchy()</text>
</a>
</g>
<g id="a_node6_83"><a xlink:href="#" xlink:title="draw_dependencies(self, g: graphviz.graphs.Digraph, mode: str) &#45;&gt; None">
<text text-anchor="start" x="381.5" y="-424" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">draw_dependencies()</text>
</a>
</g>
<g id="a_node6_84"><a xlink:href="#" xlink:title="draw_edge(self, g: graphviz.graphs.Digraph, mode: str, node_from: str, node_to: str, **kwargs: Any) &#45;&gt; None">
<text text-anchor="start" x="381.5" y="-413" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">draw_edge()</text>
</a>
</g>
<g id="a_node6_85"><a xlink:href="#" xlink:title="expand_criteria(self, criteria: List[Union[str, Tuple[Callable, int], Tuple[str, Tuple[Callable, int]]]]) &#45;&gt; List[Tuple[str, Tuple[Callable, int]]]:&#10;Return list of vars matched by `criteria`.">
<text text-anchor="start" x="381.5" y="-402" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">expand_criteria()</text>
</a>
</g>
<g id="a_node6_86"><a xlink:href="#" xlink:title="format_var(self, var: Tuple[str, Tuple[Callable, int]], current_func: Optional[Callable] = None) &#45;&gt; str:&#10;Return string for `var` in `current_func`.">
<text text-anchor="start" x="381.5" y="-391" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_var()</text>
</a>
</g>
<g id="a_node6_87"><a xlink:href="#" xlink:title="id(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return a unique ID for `var`.">
<text text-anchor="start" x="381.5" y="-380" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">id()</text>
</a>
</g>
<g id="a_node6_88"><a xlink:href="#" xlink:title="label(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Render node `var` using HTML style.">
<text text-anchor="start" x="381.5" y="-369" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">label()</text>
</a>
</g>
<g id="a_node6_89"><a xlink:href="#" xlink:title="make_graph(self, name: str = &#39;dependencies&#39;, comment: str = &#39;Dependencies&#39;) &#45;&gt; graphviz.graphs.Digraph">
<text text-anchor="start" x="381.5" y="-358" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">make_graph()</text>
</a>
</g>
<g id="a_node6_90"><a xlink:href="#" xlink:title="repr_dependencies(self, vars: Dict[Tuple[str, Tuple[Callable, int]], Set[Tuple[str, Tuple[Callable, int]]]]) &#45;&gt; str">
<text text-anchor="start" x="381.5" y="-347" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">repr_dependencies()</text>
</a>
</g>
<g id="a_node6_91"><a xlink:href="#" xlink:title="repr_deps(self, var_set: Set[Tuple[str, Tuple[Callable, int]]]) &#45;&gt; str">
<text text-anchor="start" x="381.5" y="-336" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">repr_deps()</text>
</a>
</g>
<g id="a_node6_92"><a xlink:href="#" xlink:title="repr_var(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str">
<text text-anchor="start" x="381.5" y="-325" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">repr_var()</text>
</a>
</g>
<g id="a_node6_93"><a xlink:href="#" xlink:title="source(self, node: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return the source code for a given node.">
<text text-anchor="start" x="381.5" y="-314" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">source()</text>
</a>
</g>
<g id="a_node6_94"><a xlink:href="#" xlink:title="tooltip(self, var: Tuple[str, Tuple[Callable, int]]) &#45;&gt; str:&#10;Return a tooltip for node `var`.">
<text text-anchor="start" x="381.5" y="-303" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">tooltip()</text>
</a>
</g>
<g id="a_node6_95"><a xlink:href="#" xlink:title="validate(self) &#45;&gt; None:&#10;Perform a simple syntactic validation of dependencies">
<text text-anchor="start" x="381.5" y="-292" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">validate()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Dependencies&#45;&gt;StackInspector -->
<g id="edge5" class="edge">
<title>Dependencies&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M373.21,-604.05C370.02,-610.16 366.77,-616.17 363.5,-622 358.43,-631.04 352.76,-640.31 346.92,-649.37"/>
<polygon fill="none" stroke="black" points="344.17,-647.17 341.61,-657.45 350.03,-651.01 344.17,-647.17"/>
</g>
<!-- Legend -->
<g id="node7" class="node">
<title>Legend</title>
<text text-anchor="start" x="418.5" y="-142" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="418.5" y="-132" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="425.5" y="-132" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="418.5" y="-122" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="425.5" y="-122" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="418.5" y="-112" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="425.5" y="-112" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="418.5" y="-102.8" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
