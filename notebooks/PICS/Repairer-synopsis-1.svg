<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 7.0.2 (20221119.0110)
 -->
<!-- Pages: 1 -->
<svg width="623pt" height="581pt"
 viewBox="0.00 0.00 622.50 581.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 577)">
<g id="a_graph0"><a xlink:title="Repairer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-577 618.5,-577 618.5,4 -4,4"/>
</a>
</g>
<!-- Repairer -->
<g id="node1" class="node">
<title>Repairer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class Repairer:&#10;A class for automatic repair of Python programs">
<polygon fill="none" stroke="black" points="15,-0.5 15,-218.5 152,-218.5 152,-0.5 15,-0.5"/>
<text text-anchor="start" x="56.5" y="-204.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">Repairer</text>
<polyline fill="none" stroke="black" points="15,-195.5 152,-195.5"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="Repairer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, debugger: StatisticalDebugger.RankingDebugger, *, targets: Optional[List[Any]] = None, sources: Optional[List[Any]] = None, log: Union[bool, int] = False, mutator_class: Type = &lt;class &#39;StatementMutator&#39;&gt;, crossover_class: Type = &lt;class &#39;CrossoverOperator&#39;&gt;, reducer_class: Type = &lt;class &#39;DeltaDebugger.DeltaDebugger&#39;&gt;, globals: Optional[Dict[str, Any]] = None):&#10;Constructor.&#10;`debugger`: a `RankingDebugger` to take tests and coverage from.&#10;`targets`: a list of functions/modules to be repaired.&#10;(default: the covered functions in `debugger`, except tests)&#10;`sources`: a list of functions/modules to take repairs from.&#10;(default: same as `targets`)&#10;`globals`: if given, a `globals()` dict for executing targets&#10;(default: `globals()` of caller)">
<text text-anchor="start" x="23.5" y="-184" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="repair(self, population_size: int = 40, iterations: int = 100) &#45;&gt; Tuple[ast.AST, float]:&#10;Repair the function we collected test runs from.&#10;Use a population size of `population_size` and&#10;at most `iterations` iterations.&#10;Returns a pair (`ast`, `fitness`) where&#10;`ast` is the AST of the repaired function, and&#10;`fitness` is its fitness (between 0 and 1.0)">
<text text-anchor="start" x="23.5" y="-173" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">repair()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="default_functions(self) &#45;&gt; List[Callable]:&#10;Return the set of functions to be repaired.&#10;Functions whose names start or end in `test` are excluded.">
<text text-anchor="start" x="23.5" y="-161" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">default_functions()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="evolve(self, population: List[ast.AST]) &#45;&gt; List[ast.AST]:&#10;Evolve the candidate population by mutating and crossover.">
<text text-anchor="start" x="23.5" y="-150" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">evolve()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="fitness(self, tree: ast.AST) &#45;&gt; float:&#10;Test `tree`, returning its fitness">
<text text-anchor="start" x="23.5" y="-139" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">fitness()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="fitness_key(self, tree: ast.AST) &#45;&gt; Tuple[float, int]:&#10;Key to be used for sorting the population">
<text text-anchor="start" x="23.5" y="-128" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">fitness_key()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="getsource(self, item: Union[str, Any]) &#45;&gt; str:&#10;Get the source for `item`. Can also be a string.">
<text text-anchor="start" x="23.5" y="-117" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">getsource()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="initial_population(self, size: int) &#45;&gt; List[ast.AST]:&#10;Return an initial population of size `size`">
<text text-anchor="start" x="23.5" y="-106" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">initial_population()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="log_tree(self, description: str, tree: Any) &#45;&gt; None:&#10;Print out `tree` as source code prefixed by `description`.">
<text text-anchor="start" x="23.5" y="-95" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node1_10"><a xlink:href="#" xlink:title="parse(self, items: List[Any]) &#45;&gt; ast.AST:&#10;Read in a list of items into a single tree">
<text text-anchor="start" x="23.5" y="-84" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">parse()</text>
</a>
</g>
<g id="a_node1_11"><a xlink:href="#" xlink:title="reduce(self, tree: ast.AST) &#45;&gt; ast.AST:&#10;Simplify `tree` using delta debugging.">
<text text-anchor="start" x="23.5" y="-73" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reduce()</text>
</a>
</g>
<g id="a_node1_12"><a xlink:href="#" xlink:title="run_test_set(self, test_set: str, validate: bool = False) &#45;&gt; int:&#10;Run given `test_set`&#10;(`DifferenceDebugger.PASS` or `DifferenceDebugger.FAIL`).&#10;If `validate` is set, check expectations.&#10;Return number of passed tests.">
<text text-anchor="start" x="23.5" y="-62" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_test_set()</text>
</a>
</g>
<g id="a_node1_13"><a xlink:href="#" xlink:title="run_tests(self, validate: bool = False) &#45;&gt; float:&#10;Run passing and failing tests, returning weighted fitness.">
<text text-anchor="start" x="23.5" y="-51" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_tests()</text>
</a>
</g>
<g id="a_node1_14"><a xlink:href="#" xlink:title="test_reduce(self, source_lines: List[str], original_fitness: float) &#45;&gt; None:&#10;Test function for delta debugging.">
<text text-anchor="start" x="23.5" y="-40" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">test_reduce()</text>
</a>
</g>
<g id="a_node1_15"><a xlink:href="#" xlink:title="toplevel_defs(self, tree: ast.AST) &#45;&gt; List[str]:&#10;Return a list of names of defined functions and classes in `tree`">
<text text-anchor="start" x="23.5" y="-29" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">toplevel_defs()</text>
</a>
</g>
<g id="a_node1_16"><a xlink:href="#" xlink:title="validate(self) &#45;&gt; None">
<text text-anchor="start" x="23.5" y="-18" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">validate()</text>
</a>
</g>
<g id="a_node1_17"><a xlink:href="#" xlink:title="weight(self, test_set: str) &#45;&gt; float:&#10;Return the weight of `test_set`&#10;(`DifferenceDebugger.PASS` or `DifferenceDebugger.FAIL`).">
<text text-anchor="start" x="23.5" y="-7" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">weight()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StackInspector -->
<g id="node2" class="node">
<title>StackInspector</title>
<g id="a_node2"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="black" points="0,-320 0,-362 167,-362 167,-320 0,-320"/>
<text text-anchor="start" x="36.5" y="-347.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="black" points="0,-339 167,-339"/>
<g id="a_node2_18"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node2_19"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {(&#39;middle_test&#39;, 1): &lt;function middle_test&gt;, (&#39;test_reduce&#39;, 2): &lt;function test_reduce&gt;, (&#39;remove_html_markup_test&#39;, 1): &lt;function remove_html_markup_test&gt;}">
<text text-anchor="start" x="8.5" y="-326.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_generated_function_cache</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Repairer&#45;&gt;StackInspector -->
<g id="edge1" class="edge">
<title>Repairer&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M83.5,-218.19C83.5,-251.32 83.5,-285.23 83.5,-308.83"/>
<polygon fill="none" stroke="black" points="80,-308.66 83.5,-318.66 87,-308.66 80,-308.66"/>
</g>
<!-- ConditionMutator -->
<g id="node3" class="node">
<title>ConditionMutator</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class ConditionMutator:&#10;Mutate conditions in an AST">
<polygon fill="none" stroke="black" points="192.5,-72 192.5,-147 320.5,-147 320.5,-72 192.5,-72"/>
<text text-anchor="start" x="200.5" y="-132.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">ConditionMutator</text>
<polyline fill="none" stroke="black" points="192.5,-124 320.5,-124"/>
<g id="a_node3_20"><a xlink:href="#" xlink:title="ConditionMutator">
<g id="a_node3_21"><a xlink:href="#" xlink:title="__init__(self, *args: Any, **kwargs: Any) &#45;&gt; None:&#10;Constructor. Arguments are as with `StatementMutator` constructor.">
<text text-anchor="start" x="202.5" y="-113" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_22"><a xlink:href="#" xlink:title="choose_bool_op(self) &#45;&gt; str">
<text text-anchor="start" x="202.5" y="-101" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_bool_op()</text>
</a>
</g>
<g id="a_node3_23"><a xlink:href="#" xlink:title="choose_condition(self) &#45;&gt; ast.expr:&#10;Return a random condition from source.">
<text text-anchor="start" x="202.5" y="-90" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_condition()</text>
</a>
</g>
<g id="a_node3_24"><a xlink:href="#" xlink:title="swap(self, node: ast.AST) &#45;&gt; ast.AST:&#10;Replace `node` condition by a condition from `source`">
<text text-anchor="start" x="202.5" y="-80" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">swap()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- StatementMutator -->
<g id="node4" class="node">
<title>StatementMutator</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class StatementMutator:&#10;Mutate statements in an AST for automated repair.">
<polygon fill="none" stroke="black" points="185,-255.5 185,-426.5 328,-426.5 328,-255.5 185,-255.5"/>
<text text-anchor="start" x="199" y="-412.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StatementMutator</text>
<polyline fill="none" stroke="black" points="185,-403.5 328,-403.5"/>
<g id="a_node4_25"><a xlink:href="#" xlink:title="StatementMutator">
<g id="a_node4_26"><a xlink:href="#" xlink:title="NODE_MAX_LENGTH = 20">
<text text-anchor="start" x="211.5" y="-391" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">NODE_MAX_LENGTH</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="185,-384.5 328,-384.5"/>
<g id="a_node4_27"><a xlink:href="#" xlink:title="StatementMutator">
<g id="a_node4_28"><a xlink:href="#" xlink:title="__init__(self, suspiciousness_func: Optional[Callable[[Tuple[Callable, int]], float]] = None, source: Optional[List[ast.AST]] = None, log: Union[bool, int] = False) &#45;&gt; None:&#10;Constructor.&#10;`suspiciousness_func` is a function that takes a location&#10;(function, line_number) and returns a suspiciousness value&#10;between 0 and 1.0. If not given, all locations get the same&#10;suspiciousness of 1.0.&#10;`source` is a list of statements to choose from.">
<text text-anchor="start" x="193.5" y="-373" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_29"><a xlink:href="#" xlink:title="mutate(self, tree: ast.AST) &#45;&gt; ast.AST:&#10;Mutate the given AST `tree` in place. Return mutated tree.">
<text text-anchor="start" x="193.5" y="-362" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mutate()</text>
</a>
</g>
<g id="a_node4_30"><a xlink:href="#" xlink:title="choose_op(self) &#45;&gt; Callable">
<text text-anchor="start" x="193.5" y="-350" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_op()</text>
</a>
</g>
<g id="a_node4_31"><a xlink:href="#" xlink:title="choose_statement(self) &#45;&gt; ast.AST">
<text text-anchor="start" x="193.5" y="-339" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">choose_statement()</text>
</a>
</g>
<g id="a_node4_32"><a xlink:href="#" xlink:title="delete(self, node: ast.AST) &#45;&gt; None:&#10;Delete `node`.">
<text text-anchor="start" x="193.5" y="-328" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">delete()</text>
</a>
</g>
<g id="a_node4_33"><a xlink:href="#" xlink:title="format_node(self, node: ast.AST) &#45;&gt; str:&#10;Return a string representation for `node`.">
<text text-anchor="start" x="193.5" y="-317" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_node()</text>
</a>
</g>
<g id="a_node4_34"><a xlink:href="#" xlink:title="insert(self, node: ast.AST) &#45;&gt; Union[ast.AST, List[ast.AST]]:&#10;Insert a random node from `source` after `node`">
<text text-anchor="start" x="193.5" y="-306" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">insert()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="#" xlink:title="node_suspiciousness(self, stmt: ast.AST, func_name: str) &#45;&gt; float">
<text text-anchor="start" x="193.5" y="-295" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">node_suspiciousness()</text>
</a>
</g>
<g id="a_node4_36"><a xlink:href="#" xlink:title="node_to_be_mutated(self, tree: ast.AST) &#45;&gt; ast.AST">
<text text-anchor="start" x="193.5" y="-284" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">node_to_be_mutated()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="#" xlink:title="swap(self, node: ast.AST) &#45;&gt; ast.AST:&#10;Replace `node` with a random node from `source`">
<text text-anchor="start" x="193.5" y="-274" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">swap()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="#" xlink:title="visit(self, node: ast.AST) &#45;&gt; ast.AST:&#10;Visit a node.">
<text text-anchor="start" x="193.5" y="-263" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">visit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConditionMutator&#45;&gt;StatementMutator -->
<g id="edge2" class="edge">
<title>ConditionMutator&#45;&gt;StatementMutator</title>
<path fill="none" stroke="black" d="M256.5,-146.86C256.5,-173.21 256.5,-210.11 256.5,-244.61"/>
<polygon fill="none" stroke="black" points="253,-244.2 256.5,-254.2 260,-244.2 253,-244.2"/>
</g>
<!-- NodeTransformer -->
<g id="node5" class="node">
<title>NodeTransformer</title>
<g id="a_node5"><a xlink:href="ast.ipynb" xlink:title="class NodeTransformer:&#10;A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#10;allows modification of nodes.&#10;&#10;The `NodeTransformer` will walk the AST and use the return value of the&#10;visitor methods to replace or remove the old node. &#160;If the return value of&#10;the visitor method is ``None``, the node will be removed from its location,&#10;otherwise it is replaced with the return value. &#160;The return value may be the&#10;original node in which case no replacement takes place.&#10;&#10;Here is an example transformer that rewrites all occurrences of name lookups&#10;(``foo``) to ``data[&#39;foo&#39;]``::&#10;&#10;class RewriteName(NodeTransformer):&#10;&#10;def visit_Name(self, node):&#10;return Subscript(&#10;value=Name(id=&#39;data&#39;, ctx=Load()),&#10;slice=Constant(value=node.id),&#10;ctx=node.ctx&#10;)&#10;&#10;Keep in mind that if the node you&#39;re operating on has child nodes you must&#10;either transform the child nodes yourself or call the :meth:`generic_visit`&#10;method for the node first.&#10;&#10;For nodes that were part of a collection of statements (that applies to all&#10;statement nodes), the visitor may also return a list of nodes rather than&#10;just a single node.&#10;&#10;Usually you use the transformer like this::&#10;&#10;node = YourTransformer().visit(node)">
<polygon fill="none" stroke="black" points="196,-463.5 196,-499.5 317,-499.5 317,-463.5 196,-463.5"/>
<text text-anchor="start" x="204" y="-478.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">NodeTransformer</text>
</a>
</g>
</g>
<!-- StatementMutator&#45;&gt;NodeTransformer -->
<g id="edge3" class="edge">
<title>StatementMutator&#45;&gt;NodeTransformer</title>
<path fill="none" stroke="black" d="M256.5,-426.16C256.5,-435.53 256.5,-444.51 256.5,-452.38"/>
<polygon fill="none" stroke="black" points="253,-452.22 256.5,-462.22 260,-452.22 253,-452.22"/>
</g>
<!-- NodeVisitor -->
<g id="node6" class="node">
<title>NodeVisitor</title>
<g id="a_node6"><a xlink:href="ast.ipynb" xlink:title="class NodeVisitor:&#10;A node visitor base class that walks the abstract syntax tree and calls a&#10;visitor function for every node found. &#160;This function may return a value&#10;which is forwarded by the `visit` method.&#10;&#10;This class is meant to be subclassed, with the subclass adding visitor&#10;methods.&#10;&#10;Per default the visitor functions for the nodes are ``&#39;visit_&#39;`` +&#10;class name of the node. &#160;So a `TryFinally` node visit function would&#10;be `visit_TryFinally`. &#160;This behavior can be changed by overriding&#10;the `visit` method. &#160;If no visitor function exists for a node&#10;(return value `None`) the `generic_visit` visitor is used instead.&#10;&#10;Don&#39;t use the `NodeVisitor` if you want to apply changes to nodes during&#10;traversing. &#160;For this a special visitor exists (`NodeTransformer`) that&#10;allows modifications.">
<polygon fill="none" stroke="black" points="214,-536.5 214,-572.5 299,-572.5 299,-536.5 214,-536.5"/>
<text text-anchor="start" x="222" y="-551.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-style="italic" font-size="14.00" fill="#6a0dad">NodeVisitor</text>
</a>
</g>
</g>
<!-- NodeTransformer&#45;&gt;NodeVisitor -->
<g id="edge4" class="edge">
<title>NodeTransformer&#45;&gt;NodeVisitor</title>
<path fill="none" stroke="black" d="M256.5,-499.33C256.5,-507.11 256.5,-516.56 256.5,-525.38"/>
<polygon fill="none" stroke="black" points="253,-525.28 256.5,-535.28 260,-525.28 253,-525.28"/>
</g>
<!-- CrossoverOperator -->
<g id="node7" class="node">
<title>CrossoverOperator</title>
<g id="a_node7"><a xlink:href="#" xlink:title="class CrossoverOperator:&#10;A class for performing statement crossover of Python programs">
<polygon fill="none" stroke="black" points="339,-51.5 339,-167.5 476,-167.5 476,-51.5 339,-51.5"/>
<text text-anchor="start" x="347.5" y="-153.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CrossoverOperator</text>
<polyline fill="none" stroke="black" points="339,-144.5 476,-144.5"/>
<g id="a_node7_39"><a xlink:href="#" xlink:title="CrossoverOperator">
<g id="a_node7_40"><a xlink:href="#" xlink:title="SKIP_LIST = {&lt;class &#39;ast.Module&#39;&gt;, &lt;class &#39;ast.ClassDef&#39;&gt;}">
<text text-anchor="start" x="380.5" y="-132" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">SKIP_LIST</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="339,-125.5 476,-125.5"/>
<g id="a_node7_41"><a xlink:href="#" xlink:title="CrossoverOperator">
<g id="a_node7_42"><a xlink:href="#" xlink:title="__init__(self, log: Union[bool, int] = False):&#10;Constructor. If `log` is set, turn on logging.">
<text text-anchor="start" x="347.5" y="-114.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node7_43"><a xlink:href="#" xlink:title="crossover(self, t1: ast.AST, t2: ast.AST) &#45;&gt; Tuple[ast.AST, ast.AST]:&#10;Do a crossover of ASTs `t1` and `t2`.&#10;Raises `CrossoverError` if no crossover is found.">
<text text-anchor="start" x="347.5" y="-103.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">crossover()</text>
</a>
</g>
<g id="a_node7_44"><a xlink:href="#" xlink:title="can_cross(self, tree: ast.AST, body_attr: str = &#39;body&#39;) &#45;&gt; bool">
<text text-anchor="start" x="347.5" y="-91.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">can_cross()</text>
</a>
</g>
<g id="a_node7_45"><a xlink:href="#" xlink:title="cross_bodies(self, body_1: List[ast.AST], body_2: List[ast.AST]) &#45;&gt; Tuple[List[ast.AST], List[ast.AST]]:&#10;Crossover the statement lists `body_1` x `body_2`. Return new lists.">
<text text-anchor="start" x="347.5" y="-80.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">cross_bodies()</text>
</a>
</g>
<g id="a_node7_46"><a xlink:href="#" xlink:title="crossover_attr(self, t1: ast.AST, t2: ast.AST, body_attr: str) &#45;&gt; bool:&#10;Crossover the bodies `body_attr` of two trees `t1` and `t2`.&#10;Return True if successful.">
<text text-anchor="start" x="347.5" y="-69.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">crossover_attr()</text>
</a>
</g>
<g id="a_node7_47"><a xlink:href="#" xlink:title="crossover_branches(self, t1: ast.AST, t2: ast.AST) &#45;&gt; bool:&#10;Special case:&#10;`t1` = `if P: S1 else: S2` x `t2` = `if P&#39;: S1&#39; else: S2&#39;`&#10;becomes&#10;`t1` = `if P: S2&#39; else: S1&#39;` and `t2` = `if P&#39;: S2 else: S1`&#10;Returns True if successful.">
<text text-anchor="start" x="347.5" y="-58.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">crossover_branches()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node8" class="node">
<title>Legend</title>
<text text-anchor="start" x="494.5" y="-127" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="494.5" y="-117" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="501.5" y="-117" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="494.5" y="-107" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="501.5" y="-107" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="494.5" y="-97" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="501.5" y="-97" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="494.5" y="-87.8" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
