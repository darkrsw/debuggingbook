<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.49.1 (20210923.0004)
 -->
<!-- Pages: 1 -->
<svg width="450pt" height="536pt"
 viewBox="0.00 0.00 449.50 536.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 532)">
<g id="a_graph0"><a xlink:title="DDSetDebugger class hierarchy">
<polygon fill="white" stroke="transparent" points="-4,4 -4,-532 445.5,-532 445.5,4 -4,4"/>
</a>
</g>
<!-- DDSetDebugger -->
<g id="node1" class="node">
<title>DDSetDebugger</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class DDSetDebugger:&#10;Debugger implementing the DDSET algorithm for abstracting failure&#45;inducing inputs.">
<polygon fill="none" stroke="black" points="23,-17 23,-103 144,-103 144,-17 23,-17"/>
<text text-anchor="start" x="31" y="-88.8" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">DDSetDebugger</text>
<polyline fill="none" stroke="black" points="23,-80 144,-80 "/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="DDSetDebugger">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], generalizer_class: Type = &lt;class &#39;__main__.TreeGeneralizer&#39;&gt;, parser: Optional[fuzzingbook.Parser.Parser] = None, **kwargs: Any) &#45;&gt; None:&#10;Constructor.&#10;`grammar` is an input grammar in fuzzingbook format.&#10;`generalizer_class` is the tree generalizer class to use&#10;(default: `TreeGeneralizer`)&#10;`parser` is the parser to use (default: `EarleyParser(grammar)`).&#10;All other keyword args are passed to the tree generalizer, notably:&#10;`fuzzer` &#45; the fuzzer to use (default: `GrammarFuzzer`), and&#10;`log` &#45; enables debugging output if True.">
<text text-anchor="start" x="47.5" y="-68.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="__repr__(self) &#45;&gt; str:&#10;Return a string representation of the generalized call.">
<text text-anchor="start" x="47.5" y="-57.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__repr__()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return a call with arguments randomly instantiated&#10;from the abstract failure&#45;inducing pattern.">
<text text-anchor="start" x="47.5" y="-46.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="fuzz_args(self) &#45;&gt; Dict[str, Any]:&#10;Return arguments randomly instantiated&#10;from the abstract failure&#45;inducing pattern.">
<text text-anchor="start" x="47.5" y="-35.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_args()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="generalize(self) &#45;&gt; Dict[str, Any]:&#10;Generalize arguments seen. For each function argument,&#10;produce an abstract failure&#45;inducing input that characterizes&#10;the set of inputs for which the function fails.">
<text text-anchor="start" x="47.5" y="-24.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">generalize()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CallCollector -->
<g id="node2" class="node">
<title>CallCollector</title>
<g id="a_node2"><a xlink:href="DeltaDebugger.ipynb" xlink:title="class CallCollector:&#10;Collect an exception&#45;raising function call f().&#10;Use as `with CallCollector(): f()`">
<polygon fill="none" stroke="black" points="21,-156.5 21,-319.5 146,-319.5 146,-156.5 21,-156.5"/>
<text text-anchor="start" x="43" y="-305.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">CallCollector</text>
<polyline fill="none" stroke="black" points="21,-296.5 146,-296.5 "/>
<g id="a_node2_6"><a xlink:href="#" xlink:title="CallCollector">
<g id="a_node2_7"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__enter__(self) &#45;&gt; Any:&#10;Called at begin of `with` block. Turn tracing on.">
<text text-anchor="start" x="29.5" y="-285.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__enter__()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__exit__(self, exc_tp: Type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; Optional[bool]:&#10;Called at end of `with` block. Turn tracing off.">
<text text-anchor="start" x="29.5" y="-274.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__exit__()</text>
</a>
</g>
<g id="a_node2_9"><a xlink:href="DeltaDebugger.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize collector">
<text text-anchor="start" x="29.5" y="-263.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_10"><a xlink:href="DeltaDebugger.ipynb" xlink:title="args(self) &#45;&gt; Dict[str, Any]:&#10;Return the dictionary of collected arguments.">
<text text-anchor="start" x="29.5" y="-252.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">args()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="DeltaDebugger.ipynb" xlink:title="call(self, new_args: Optional[Dict[str, Any]] = None) &#45;&gt; Any:&#10;Call collected function. If `new_args` is given,&#10;override arguments from its {var: value} entries.">
<text text-anchor="start" x="29.5" y="-241.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">call()</text>
</a>
</g>
<g id="a_node2_12"><a xlink:href="DeltaDebugger.ipynb" xlink:title="exception(self) &#45;&gt; Optional[BaseException]:&#10;Return the exception produced, or `None` if none.">
<text text-anchor="start" x="29.5" y="-230.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">exception()</text>
</a>
</g>
<g id="a_node2_13"><a xlink:href="DeltaDebugger.ipynb" xlink:title="function(self) &#45;&gt; Callable:&#10;Return the function called.">
<text text-anchor="start" x="29.5" y="-219.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">function()</text>
</a>
</g>
<g id="a_node2_14"><a xlink:href="DeltaDebugger.ipynb" xlink:title="after_collection(self) &#45;&gt; None:&#10;Called after collection. To be defined in subclasses.">
<text text-anchor="start" x="29.5" y="-208.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">after_collection()</text>
</a>
</g>
<g id="a_node2_15"><a xlink:href="DeltaDebugger.ipynb" xlink:title="format_call(self, args: Optional[Dict[str, Any]] = None) &#45;&gt; str:&#10;Return a string representing a call of the function with given args.">
<text text-anchor="start" x="29.5" y="-196.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_call()</text>
</a>
</g>
<g id="a_node2_16"><a xlink:href="DeltaDebugger.ipynb" xlink:title="format_exception(self, exc: Optional[BaseException] = None) &#45;&gt; str:&#10;Return a string representing the given exception.">
<text text-anchor="start" x="29.5" y="-185.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">format_exception()</text>
</a>
</g>
<g id="a_node2_17"><a xlink:href="DeltaDebugger.ipynb" xlink:title="init(self) &#45;&gt; None:&#10;Reset for new collection.">
<text text-anchor="start" x="29.5" y="-174.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">init()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="DeltaDebugger.ipynb" xlink:title="traceit(self, frame: frame, event: str, arg: Any) &#45;&gt; None:&#10;Tracing function. Collect first call, then turn tracing off.">
<text text-anchor="start" x="29.5" y="-163.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- DDSetDebugger&#45;&gt;CallCollector -->
<g id="edge1" class="edge">
<title>DDSetDebugger&#45;&gt;CallCollector</title>
<path fill="none" stroke="black" d="M83.5,-103.16C83.5,-116.13 83.5,-130.95 83.5,-145.88"/>
<polygon fill="none" stroke="black" points="80,-146.22 83.5,-156.22 87,-146.22 80,-146.22"/>
</g>
<!-- StackInspector -->
<g id="node3" class="node">
<title>StackInspector</title>
<g id="a_node3"><a xlink:href="StackInspector.ipynb" xlink:title="class StackInspector:&#10;Provide functions to inspect the stack">
<polygon fill="none" stroke="black" points="0,-356.5 0,-527.5 167,-527.5 167,-356.5 0,-356.5"/>
<text text-anchor="start" x="37" y="-513.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">StackInspector</text>
<polyline fill="none" stroke="black" points="0,-504.5 167,-504.5 "/>
<g id="a_node3_19"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_20"><a xlink:href="StackInspector.ipynb" xlink:title="_generated_function_cache = {}">
<text text-anchor="start" x="8.5" y="-492" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_generated_function_cache</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="0,-485.5 167,-485.5 "/>
<g id="a_node3_21"><a xlink:href="#" xlink:title="StackInspector">
<g id="a_node3_22"><a xlink:href="StackInspector.ipynb" xlink:title="caller_frame(self) &#45;&gt; frame:&#10;Return the frame of the caller.">
<text text-anchor="start" x="26.5" y="-473" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">caller_frame()</text>
</a>
</g>
<g id="a_node3_23"><a xlink:href="StackInspector.ipynb" xlink:title="caller_function(self) &#45;&gt; Callable:&#10;Return the calling function">
<text text-anchor="start" x="26.5" y="-462" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">caller_function()</text>
</a>
</g>
<g id="a_node3_24"><a xlink:href="StackInspector.ipynb" xlink:title="caller_globals(self) &#45;&gt; Dict[str, Any]:&#10;Return the globals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-451" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">caller_globals()</text>
</a>
</g>
<g id="a_node3_25"><a xlink:href="StackInspector.ipynb" xlink:title="caller_locals(self) &#45;&gt; Dict[str, Any]:&#10;Return the locals() environment of the caller.">
<text text-anchor="start" x="26.5" y="-440" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">caller_locals()</text>
</a>
</g>
<g id="a_node3_26"><a xlink:href="StackInspector.ipynb" xlink:title="caller_location(self) &#45;&gt; Tuple[Callable, int]:&#10;Return the location (func, lineno) of the caller.">
<text text-anchor="start" x="26.5" y="-429" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">caller_location()</text>
</a>
</g>
<g id="a_node3_27"><a xlink:href="StackInspector.ipynb" xlink:title="create_function(self, frame: frame) &#45;&gt; Callable:&#10;Create function for given frame">
<text text-anchor="start" x="26.5" y="-418" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">create_function()</text>
</a>
</g>
<g id="a_node3_28"><a xlink:href="StackInspector.ipynb" xlink:title="is_internal_error(self, exc_tp: Type, exc_value: BaseException, exc_traceback: traceback) &#45;&gt; bool:&#10;Return True if exception was raised from `StackInspector` or a subclass.">
<text text-anchor="start" x="26.5" y="-407" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">is_internal_error()</text>
</a>
</g>
<g id="a_node3_29"><a xlink:href="StackInspector.ipynb" xlink:title="our_frame(self, frame: frame) &#45;&gt; bool:&#10;Return true if `frame` is in the current (inspecting) class.">
<text text-anchor="start" x="26.5" y="-396" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">our_frame()</text>
</a>
</g>
<g id="a_node3_30"><a xlink:href="StackInspector.ipynb" xlink:title="search_frame(self, name: str, frame: Optional[frame] = None) &#45;&gt; Tuple[Optional[frame], Optional[Callable]]:&#10;Return a pair (`frame`, `item`)&#10;in which the function `name` is defined as `item`.">
<text text-anchor="start" x="26.5" y="-385" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">search_frame()</text>
</a>
</g>
<g id="a_node3_31"><a xlink:href="StackInspector.ipynb" xlink:title="search_func(self, name: str, frame: Optional[frame] = None) &#45;&gt; Optional[Callable]:&#10;Search in callers for a definition of the function `name`">
<text text-anchor="start" x="26.5" y="-374" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">search_func()</text>
</a>
</g>
<g id="a_node3_32"><a xlink:href="StackInspector.ipynb" xlink:title="unknown(self) &#45;&gt; None">
<text text-anchor="start" x="26.5" y="-363" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">unknown()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- CallCollector&#45;&gt;StackInspector -->
<g id="edge2" class="edge">
<title>CallCollector&#45;&gt;StackInspector</title>
<path fill="none" stroke="black" d="M83.5,-319.71C83.5,-328.49 83.5,-337.49 83.5,-346.41"/>
<polygon fill="none" stroke="black" points="80,-346.45 83.5,-356.45 87,-346.45 80,-346.45"/>
</g>
<!-- TreeGeneralizer -->
<g id="node4" class="node">
<title>TreeGeneralizer</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class TreeGeneralizer:&#10;Determine which parts of a derivation tree can be generalized.">
<polygon fill="none" stroke="black" points="162,-0.5 162,-119.5 305,-119.5 305,-0.5 162,-0.5"/>
<text text-anchor="start" x="184" y="-105.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">TreeGeneralizer</text>
<polyline fill="none" stroke="black" points="162,-96.5 305,-96.5 "/>
<g id="a_node4_33"><a xlink:href="#" xlink:title="TreeGeneralizer">
<g id="a_node4_34"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], tree: Tuple[str, Optional[List[Any]]], test: Callable, max_tries_for_generalization: int = 10, **kwargs: Any) &#45;&gt; None:&#10;Constructor. `grammar` and `tree` are as in `TreeMutator`.&#10;`test` is a function taking a string that either&#10;* raises an exception, indicating test failure;&#10;* or not, indicating test success.&#10;`max_tries_for_generalization` is the number of times&#10;an instantiation has to fail before it is generalized.">
<text text-anchor="start" x="170.5" y="-85.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_35"><a xlink:href="#" xlink:title="can_generalize(self, path: List[int], tree: Optional[Tuple[str, Optional[List[Any]]]] = None) &#45;&gt; bool:&#10;Return True if the subtree at `path` can be generalized.">
<text text-anchor="start" x="170.5" y="-73.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">can_generalize()</text>
</a>
</g>
<g id="a_node4_36"><a xlink:href="#" xlink:title="find_paths(self, predicate: Callable[[List[int], Tuple[str, Optional[List[Any]]]], bool], path: Optional[List[int]] = None, tree: Optional[Tuple[str, Optional[List[Any]]]] = None) &#45;&gt; List[List[int]]:&#10;Return a list of all paths for which `predicate` holds.&#10;`predicate` is a function `predicate`(`path`, `tree`), where&#10;`path` denotes a subtree in `tree`. If `predicate()` returns&#10;True, `path` is included in the returned list.">
<text text-anchor="start" x="170.5" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_paths()</text>
</a>
</g>
<g id="a_node4_37"><a xlink:href="#" xlink:title="fuzz_tree(self, tree: Tuple[str, Optional[List[Any]]]) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Return an instantiated copy of `tree`.">
<text text-anchor="start" x="170.5" y="-51.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node4_38"><a xlink:href="#" xlink:title="generalizable_paths(self) &#45;&gt; List[List[int]]:&#10;Return a list of all paths whose subtrees can be generalized.">
<text text-anchor="start" x="170.5" y="-40.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">generalizable_paths()</text>
</a>
</g>
<g id="a_node4_39"><a xlink:href="#" xlink:title="generalize(self) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Returns a copy of the tree in which all generalizable subtrees&#10;are generalized (= replaced by nonterminals without children)">
<text text-anchor="start" x="170.5" y="-29.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">generalize()</text>
</a>
</g>
<g id="a_node4_40"><a xlink:href="#" xlink:title="generalize_path(self, path: List[int], tree: Optional[Tuple[str, Optional[List[Any]]]] = None) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Return a copy of the tree in which the subtree at `path`&#10;is generalized (= replaced by a nonterminal without children)">
<text text-anchor="start" x="170.5" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">generalize_path()</text>
</a>
</g>
<g id="a_node4_41"><a xlink:href="#" xlink:title="test_tree(self, tree: Tuple[str, Optional[List[Any]]]) &#45;&gt; bool:&#10;Return True if testing `tree` passes, else False">
<text text-anchor="start" x="170.5" y="-7.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">test_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TreeMutator -->
<g id="node5" class="node">
<title>TreeMutator</title>
<g id="a_node5"><a xlink:href="#" xlink:title="class TreeMutator:&#10;Grammar&#45;based mutations of derivation trees.">
<polygon fill="none" stroke="black" points="186,-200.5 186,-275.5 281,-275.5 281,-200.5 186,-200.5"/>
<text text-anchor="start" x="195.5" y="-261.3" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="14.00" fill="#6a0dad">TreeMutator</text>
<polyline fill="none" stroke="black" points="186,-252.5 281,-252.5 "/>
<g id="a_node5_42"><a xlink:href="#" xlink:title="TreeMutator">
<g id="a_node5_43"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], tree: Tuple[str, Optional[List[Any]]], fuzzer: Optional[fuzzingbook.GrammarFuzzer.GrammarFuzzer] = None, log: Union[bool, int] = False):&#10;Constructor.&#10;`grammar` is the underlying grammar;&#10;`tree` is the tree to work on.&#10;`fuzzer` is the grammar fuzzer to use (default: `GrammarFuzzer`)">
<text text-anchor="start" x="194.5" y="-241.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node5_44"><a xlink:href="#" xlink:title="get_subtree(self, path: List[int], tree: Optional[Tuple[str, Optional[List[Any]]]] = None) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Access a subtree based on `path` (a list of children numbers)">
<text text-anchor="start" x="194.5" y="-229.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">get_subtree()</text>
</a>
</g>
<g id="a_node5_45"><a xlink:href="#" xlink:title="mutate(self, path: List[int], tree: Optional[Tuple[str, Optional[List[Any]]]] = None) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Return a new tree mutated at `path`">
<text text-anchor="start" x="194.5" y="-218.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">mutate()</text>
</a>
</g>
<g id="a_node5_46"><a xlink:href="#" xlink:title="new_tree(self, start_symbol: str) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Create a new subtree for &lt;start_symbol&gt;.">
<text text-anchor="start" x="194.5" y="-207.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TreeGeneralizer&#45;&gt;TreeMutator -->
<g id="edge3" class="edge">
<title>TreeGeneralizer&#45;&gt;TreeMutator</title>
<path fill="none" stroke="black" d="M233.5,-119.61C233.5,-142.55 233.5,-168.51 233.5,-190.17"/>
<polygon fill="none" stroke="black" points="230,-190.42 233.5,-200.42 237,-190.42 230,-190.42"/>
</g>
<!-- Legend -->
<g id="node6" class="node">
<title>Legend</title>
<text text-anchor="start" x="323.5" y="-77.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-weight="bold" font-size="10.00" fill="#6a0dad">Legend</text>
<text text-anchor="start" x="323.5" y="-67.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="330.5" y="-67.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="323.5" y="-57.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="330.5" y="-57.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="323.5" y="-47.5" font-family="Raleway, Helvetica, Arial, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="330.5" y="-47.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="323.5" y="-38.3" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
